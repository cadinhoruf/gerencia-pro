generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id              String        @id @default(uuid())
  name            String
  price           Decimal       @db.Decimal(10, 2)
  stock           Int?
  cost            Int
  createdAt       DateTime      @default(now())
  updateAt        DateTime      @updatedAt
  createdByUserId String?
  updatedByUserId String?
  createdBy       User?         @relation("ProductCreatedBy", fields: [createdByUserId], references: [id])
  updatedBy       User?         @relation("ProductUpdatedBy", fields: [updatedByUserId], references: [id])
  saleProducts    SaleProduct[]
  Tenant          Tenant?       @relation(fields: [tenantId], references: [id])
  tenantId        String?
  User            User?         @relation(fields: [userId], references: [id])
  userId          String?
}

enum SaleStatus {
  UNDER_REVIEW
  AWAITING_PURCHASE
  AWAITING_PAYMENT
  COMPLETED
}

model Sale {
  id              String        @id @default(uuid())
  date            DateTime
  status          SaleStatus
  createdAt       DateTime      @default(now())
  updateAt        DateTime      @updatedAt
  createdByUserId String?
  updatedByUserId String?
  createdBy       User?         @relation("SaleCreatedBy", fields: [createdByUserId], references: [id])
  updatedBy       User?         @relation("SaleUpdatedBy", fields: [updatedByUserId], references: [id])
  saleProducts    SaleProduct[]
  userId          String?
}

model SaleProduct {
  id              String   @id @default(uuid())
  saleId          String
  productId       String
  clientId        String
  unitPrice       Decimal  @db.Decimal(10, 2)
  unitCost        Decimal  @db.Decimal(10, 2)
  quantity        Int
  createdAt       DateTime @default(now())
  updateAt        DateTime @updatedAt
  createdByUserId String?
  updatedByUserId String?
  createdBy       User?    @relation("SaleProductCreatedBy", fields: [createdByUserId], references: [id])
  updatedBy       User?    @relation("SaleProductUpdatedBy", fields: [updatedByUserId], references: [id])
  products        Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  sale            Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  client          Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  userId          String?
}

model Client {
  id            String        @id @default(uuid())
  name          String
  contactName   String
  contactNumber String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  cnpj          String?
  cpf           String?
  address       String
  createdById   String?
  updatedById   String?
  createdBy     User?         @relation("ClientCreatedBy", fields: [createdById], references: [id])
  updatedBy     User?         @relation("ClientUpdatedBy", fields: [updatedById], references: [id])
  saleProducts  SaleProduct[]
}

model Tenant {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  users     User[]
  products  Product[]
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id                  String        @id @default(cuid())
  name                String?
  email               String?       @unique
  emailVerified       DateTime?
  image               String?
  role                UserRole
  password            String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  accounts            Account[]
  sessions            Session[]
  productsCreated     Product[]     @relation("ProductCreatedBy")
  productsUpdated     Product[]     @relation("ProductUpdatedBy")
  saleCreated         Sale[]        @relation("SaleCreatedBy")
  saleUpdated         Sale[]        @relation("SaleUpdatedBy")
  saleProductsCreated SaleProduct[] @relation("SaleProductCreatedBy")
  saleProductsUpdated SaleProduct[] @relation("SaleProductUpdatedBy")

  clientsCreated Client[]  @relation("ClientCreatedBy")
  clientsUpdated Client[]  @relation("ClientUpdatedBy")
  Product        Product[]
  Tenant         Tenant?   @relation(fields: [tenantId], references: [id])
  tenantId       String?
}

enum UserRole {
  ADMIN
  USER
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
